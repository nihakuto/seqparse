{"version":3,"file":"index.js","mappings":"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","sources":["webpack://seqparse/webpack/universalModuleDefinition","webpack://seqparse/./node_modules/fast-xml-parser/src/fxp.js","webpack://seqparse/./node_modules/fast-xml-parser/src/util.js","webpack://seqparse/./node_modules/fast-xml-parser/src/validator.js","webpack://seqparse/./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","webpack://seqparse/./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","webpack://seqparse/./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","webpack://seqparse/./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","webpack://seqparse/./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","webpack://seqparse/./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","webpack://seqparse/./node_modules/fast-xml-parser/src/xmlparser/node2json.js","webpack://seqparse/./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","webpack://seqparse/./node_modules/node-fetch/browser.js","webpack://seqparse/./node_modules/strnum/strnum.js","webpack://seqparse/./src/fetchFile.ts","webpack://seqparse/./src/index.ts","webpack://seqparse/./src/parseFile.ts","webpack://seqparse/./src/parsers/benchling.ts","webpack://seqparse/./src/parsers/biobrick.ts","webpack://seqparse/./src/parsers/fasta.ts","webpack://seqparse/./src/parsers/genbank.ts","webpack://seqparse/./src/parsers/jbei.ts","webpack://seqparse/./src/parsers/sbol.ts","webpack://seqparse/./src/parsers/sbol.v1.ts","webpack://seqparse/./src/parsers/sbol.v2.ts","webpack://seqparse/./src/parsers/seqbuilder.ts","webpack://seqparse/./src/parsers/snapgene.ts","webpack://seqparse/./src/utils.ts","webpack://seqparse/external umd \"buffer\"","webpack://seqparse/external umd \"path\"","webpack://seqparse/webpack/bootstrap","webpack://seqparse/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"buffer\"), require(\"path\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"buffer\", \"path\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"seqparse\"] = factory(require(\"buffer\"), require(\"path\"));\n\telse\n\t\troot[\"seqparse\"] = factory(root[\"buffer\"], root[\"path\"]);\n})(this, (__WEBPACK_EXTERNAL_MODULE__18__, __WEBPACK_EXTERNAL_MODULE__911__) => {\nreturn ","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.suppressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n\n  this.replaceEntitiesValue = replaceEntitiesValue;\n  this.buildAttrPairStr = buildAttrPairStr;\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          val += this.processTextOrObjNode(item, key, level)\n        } else {\n          val += this.buildTextNode(item, key, '', level);\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction buildAttrPairStr(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjNode(result.val, key, result.attrStr, level);\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  let tagEndExp = '</' + key + this.tagEndChar;\n  let piClosingChar = \"\";\n  \n  if(key[0] === \"?\") {\n    piClosingChar = \"?\";\n    tagEndExp = \"\";\n  }\n\n  if (attrStr && val.indexOf('<') === -1) {\n    return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n  } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n    return this.indentate(level) + `<!--${val}-->` + this.newLine;\n  }else {\n    return (\n      this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n      val +\n      this.indentate(level) + tagEndExp    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n      if(this.options.suppressUnpairedNode){\n        return this.indentate(level) + '<' + key + this.tagEndChar;\n      }else{\n        return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n      }\n    } else{\n      return (\n        this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar  );\n    }\n\n  }\n}\n\nfunction replaceEntitiesValue(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if( val === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(this.options.suppressUnpairedNode){\n      return this.indentate(level) + '<' + key + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n    }\n  }else if (val !== '') { //empty\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; //PI tag\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar; //normal\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, entity = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<') {\n                if( hasBody && \n                     xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'N' &&\n                     xmlData[i+4] === 'T' &&\n                     xmlData[i+5] === 'I' &&\n                     xmlData[i+6] === 'T' &&\n                     xmlData[i+7] === 'Y'\n                ){\n                    i += 7;\n                    entity = true;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'L' &&\n                     xmlData[i+4] === 'E' &&\n                     xmlData[i+5] === 'M' &&\n                     xmlData[i+6] === 'E' &&\n                     xmlData[i+7] === 'N' &&\n                     xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === 'A' &&\n                    xmlData[i+3] === 'T' &&\n                    xmlData[i+4] === 'T' &&\n                    xmlData[i+5] === 'L' &&\n                    xmlData[i+6] === 'I' &&\n                    xmlData[i+7] === 'S' &&\n                    xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === 'N' &&\n                    xmlData[i+3] === 'O' &&\n                    xmlData[i+4] === 'T' &&\n                    xmlData[i+5] === 'A' &&\n                    xmlData[i+6] === 'T' &&\n                    xmlData[i+7] === 'I' &&\n                    xmlData[i+8] === 'O' &&\n                    xmlData[i+9] === 'N'\n                ){\n                    //Not supported\n                    i += 9;\n                }else if( //comment\n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === '-' &&\n                    xmlData[i+3] === '-'\n                ){\n                    comment = true;\n                }else{\n                    throw new Error(\"Invalid DOCTYPE\");\n                }\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') {\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                    }else{\n                        throw new Error(`Invalid XML comment in DOCTYPE`);\n                    }\n                }else if(entity){\n                    parseEntityExp(exp, entities);\n                    entity = false;\n                }\n                angleBracketsCount--;\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\nfunction parseEntityExp(exp, entities){\n    const match = entityRegex.exec(exp);\n    if(match){\n        entities[ match[1] ] = {\n            regx : RegExp( `&${match[1]};`,\"g\"),\n            val: match[3]\n        };\n    }\n}\nmodule.exports = readDocType;","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n        \n        currentNode = this.tagsNodeStack.pop();//avoid recurssion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath);\n          }\n          currentNode.addChild(childNode);\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n        }\n\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //boolean tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          currentNode.addChild(childNode);\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n            currentNode.addChild(childNode);\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            currentNode.addChild(childNode);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-dobule quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const propCount = Object.keys(obj).length;\n  if( propCount === 0 || (propCount === 1 && obj[options.textNodeName]) ) return true;\n  return false;\n}\nexports.prettify = prettify;\n","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nif (global.fetch) {\n\texports.default = global.fetch.bind(global);\n}\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","import fetch, { Response } from \"node-fetch\";\n\nimport { ParseOptions, Seq } from \".\";\nimport parseFile from \"./parseFile\";\n\n/**\n * Get a remote sequence from NCBI or the iGEM registry.\n */\nexport default async (accession: string, options?: ParseOptions): Promise<Seq> => {\n  // The user doesn't specify the target registry, so we have to infer it from the passed accession: iGEM or NCBI\n  let url = `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=${accession.trim()}&rettype=gbwithparts&retmode=text`;\n  if (accession.startsWith(\"BB\")) {\n    // it's a BioBrick... target the iGEM repo\n    if ((typeof window !== \"undefined\" && typeof process === \"undefined\") || options?.cors) {\n      // use this hack to get around a no-CORS setting on iGEM webserver, pending fix on their side\n      url = `https://cors-anywhere.herokuapp.com/http://parts.igem.org/cgi/xml/part.cgi?part=${accession.trim()}`;\n    } else {\n      url = `http://parts.igem.org/cgi/xml/part.cgi?part=${accession.trim()}`;\n    }\n  }\n\n  // Request the XML from the webserver\n  let body = \"\";\n  let response: Response;\n  try {\n    response = await fetch(url);\n    body = await response.text();\n  } catch (err) {\n    throw new Error(`Failed to get part: accession=${accession} url=${url} err=${err}`);\n  }\n  if (!response.ok || !body.length) {\n    throw new Error(`Failed to get part, no body returned: accession=${accession} url=${url}`);\n  }\n\n  return (await parseFile(body))[0];\n};\n\n/** returns whether the passed ID is an accession in iGEM or NCBI */\nexport const isAccession = (accession: string): boolean => {\n  if (accession.startsWith(\"BB\")) {\n    return true; // biobrick\n  }\n  if (accession.length < 14 && accession.match(/^[a-z0-9_\\-.]+$/i)) {\n    return true;\n  }\n  return false;\n};\n","import fetchFile, { isAccession } from \"./fetchFile\";\nimport parseFile from \"./parseFile\";\n\n/** Seq is a single parsed sequence from a file or accession. */\nexport interface Seq {\n  /** annotations of the sequence */\n  annotations: Annotation[];\n  /** name of the sequence */\n  name: string;\n  /** the sequence */\n  seq: string;\n  /** type of sequence. Inferred from the seq's symbols */\n  type: \"dna\" | \"rna\" | \"aa\" | \"unknown\";\n}\n\n/** Annotation is a single feature/annotation parsed from a sequence file. */\nexport interface Annotation {\n  /** color of the annotation if set */\n  color?: string;\n  /** 1 if forward, 0 if no direction, -1 if in reverse direction */\n  direction?: number;\n  /** end of the annotation, 0-based */\n  end: number;\n  /** name of the annotation */\n  name: string;\n  /** start of the annotation, 0-based */\n  start: number;\n  /** type field if set on the annotation */\n  type?: string;\n}\n\n/** Options to parse sequence files. */\nexport interface ParseOptions {\n  /**\n   * Whether to use cors-anywhere to circumvent iGEM's web server having a bad configuration.\n   */\n  cors?: boolean;\n\n  /** name of the source file */\n  fileName?: string;\n\n  /**\n   * Source of the file (ArrayBuffer). This is necessary for SnapGene.\n   *\n   * Eg after a read from FileReader.readAsArrayBuffer() in a browser:\n   * https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsArrayBuffer\n   */\n  source?: ArrayBuffer;\n}\n\n/* Parse a sequence file. Or download a sequence with an Accession ID. */\nexport default async (input: string, options?: ParseOptions): Promise<Seq> => {\n  if (!options?.fileName && isAccession(input)) {\n    return await fetchFile(input, options);\n  }\n  return parseFile(input, options)[0];\n};\n\nexport { parseFile };\n","import { sep } from \"path\";\n\nimport { ParseOptions, Seq } from \".\";\nimport parseBenchling from \"./parsers/benchling\";\nimport parseBioBrick from \"./parsers/biobrick\";\nimport parseFasta from \"./parsers/fasta\";\nimport parseGenbank from \"./parsers/genbank\";\nimport parseJbei from \"./parsers/jbei\";\nimport parseSbol from \"./parsers/sbol\";\nimport parseSeqBuilder from \"./parsers/seqbuilder\";\nimport parseSnapgene from \"./parsers/snapgene\";\nimport { complement, guessType } from \"./utils\";\n\n/**\n * parseFile converts the contents of a sequence file to a an array of Seq\n */\nexport default (file: string, opts?: ParseOptions): Seq[] => {\n  const fileName = opts?.fileName || \"\";\n  const sourceName = fileName.split(sep).pop() || fileName;\n\n  if (!file) {\n    throw Error(\"cannot parse null or empty string\");\n  }\n\n  // this is a check for an edge case, where the user uploads come kind\n  // of file that's full of bps but doesn't fit into a defined type\n  const firstLine = file.substring(0, file.search(\"\\n\"));\n  const dnaCharLength = firstLine.replace(/[^atcgATCG]/, \"\").length;\n  const dnaOnlyFile = dnaCharLength / firstLine.length > 0.8; // is it >80% dna?\n  const name = fileName && sourceName ? sourceName.substring(0, sourceName.search(\"\\\\.\")) : \"Untitled\";\n\n  // another edge case check for whether the seq is a JSON seq from Benchling\n  // just a heuristic that says 1) yes it can be parsed 2) it contains a list of\n  // fields that are common to Benchling files\n  let isBenchling = false;\n  try {\n    const benchlingJSON = JSON.parse(file); // will err out if not JSON\n    if ([\"bases\", \"annotations\", \"primers\"].every(k => typeof benchlingJSON[k] !== \"undefined\")) {\n      isBenchling = true;\n    }\n  } catch (ex) {\n    // expected\n  }\n\n  const prefix = file.substring(0, 200);\n  let seqs: Seq[];\n  switch (true) {\n    // JBEI\n    case prefix.includes(':seq=\"http://jbei.org/sequence\"'):\n    case file.startsWith(\"<seq:seq\"):\n      seqs = parseJbei(file);\n      break;\n\n    // FASTA\n    case file.startsWith(\">\"):\n    case file.startsWith(\";\"):\n    case fileName.endsWith(\".seq\"):\n    case fileName.endsWith(\".fa\"):\n    case fileName.endsWith(\".fas\"):\n    case fileName.endsWith(\".fasta\"):\n      seqs = parseFasta(file, fileName);\n      break;\n\n    // Genbank\n    case file.includes(\"LOCUS\") && file.includes(\"ORIGIN\"):\n    case fileName.endsWith(\".gb\"):\n    case fileName.endsWith(\".gbk\"):\n    case fileName.endsWith(\".genbank\"):\n    case fileName.endsWith(\".ape\"):\n      seqs = parseGenbank(file, fileName);\n      break;\n\n    // SnapGene\n    case fileName.endsWith(\".dna\"):\n      seqs = parseSnapgene(opts);\n      break;\n\n    // SeqBuilder\n    case prefix.includes(\"Written by SeqBuilder\"):\n    case fileName.endsWith(\".sbd\"):\n      seqs = parseSeqBuilder(file, fileName);\n      break;\n\n    // BioBrick XML\n    case prefix.includes(\"Parts from the iGEM\"):\n    case prefix.includes(\"<part_list>\"):\n      seqs = parseBioBrick(file);\n      break;\n\n    // Benchling JSON\n    case isBenchling:\n      seqs = parseBenchling(file);\n      break;\n\n    // SBOL\n    case prefix.includes(\"RDF\"):\n      seqs = parseSbol(file, fileName);\n      break;\n\n    // a DNA text file without an official formatting\n    case dnaOnlyFile: {\n      const { seq } = complement(file);\n      seqs = [{ annotations: [], name, seq, type: guessType(seq) }];\n      break;\n    }\n\n    default:\n      throw Error(`${fileName} File type not recognized: ${file}`);\n  }\n\n  // bit of clean up to: only return the fields in a Seq and reorder to match expectations.\n  return seqs.map(p => ({\n    annotations: p.annotations\n      .sort((a, b) => a.start - b.start || a.end - b.end)\n      .map(a => ({\n        color: a.color,\n        direction: a.direction,\n        end: a.end,\n        name: a.name,\n        start: a.start,\n        type: a.type,\n      })),\n    name: p.name,\n    seq: p.seq,\n    type: p.type,\n  }));\n};\n","import { Seq } from \"..\";\nimport { complement, guessType, parseDirection } from \"../utils\";\n\n/**\n * Benchling format is just JSON. It's virtually the same format.\n */\nexport default (text: string): Seq[] => {\n  const partJSON = JSON.parse(text);\n  const { seq } = complement(partJSON.bases);\n\n  // throw an error if the sequence is empty\n  if (seq.length < 1) {\n    throw new Error(\"Invalid Benchling part: empty sequence\");\n  }\n\n  return [\n    {\n      annotations: partJSON.annotations.map(a => ({\n        ...a,\n        direction: parseDirection(a.strand),\n      })),\n      name: partJSON.name || partJSON._id,\n      seq: seq,\n      type: guessType(seq),\n    },\n  ];\n};\n","import { XMLParser } from \"fast-xml-parser\";\n\nimport { Seq } from \"..\";\nimport { complement, firstElement, guessType, parseDirection } from \"../utils\";\n\n/**\n * Parse a BioBrick in XML format to Seq[]\n *\n * Eg: https://parts.igem.org/cgi/xml/part.cgi?part=BBa_J23100\n */\nexport default (file: string): Seq[] => {\n  const bail = (err: string) => {\n    throw new Error(`Failed on BioBrick: ${err}`);\n  };\n\n  // parse\n  const parsedBiobrick = new XMLParser({\n    isArray: name => {\n      return [\"features\", \"part_name\", \"sequences\"].includes(name);\n    },\n    removeNSPrefix: true,\n  }).parse(file);\n\n  // get the first part\n  const { part } = parsedBiobrick.rsbpml.part_list;\n  if (!part) bail(\"No part seen in part_list\");\n\n  // extract the useful fields\n  const { features, part_name, sequences } = part;\n\n  const name = firstElement(part_name);\n\n  // parse the iGEM annotations\n  const annotations = features\n    .map(({ feature }) => {\n      if (!feature) return null;\n\n      const { direction, endpos, startpos, type } = feature;\n\n      return {\n        direction: parseDirection(direction),\n        end: +endpos,\n        name: `${direction}-${startpos}`,\n        start: +startpos || 0,\n        type: type || undefined,\n      };\n    })\n    .filter(a => a);\n\n  // parse the sequence\n  const { seq } = complement(sequences[0].seq_data);\n\n  return [\n    {\n      annotations: annotations,\n      name,\n      seq,\n      type: guessType(seq),\n    },\n  ];\n};\n","import { Seq } from \"..\";\nimport { guessType } from \"../utils\";\n\nexport default (text: string, fileName: string): Seq[] => {\n  // partFactory returns a negative \"circular\" prop, we assume they're all linear\n  if (text.trim().startsWith(\">\")) {\n    return text\n      .split(\">\") // split up if it's a multi-seq FASTA file\n      .map(t => {\n        // this starts at the end of the first line, grabs all other characters,\n        // and removes any newlines (leaving only the original sequence)\n        // sequence \"cleaning\" happens in complement (we don't support bps other than\n        // the most common right now)\n        const seq = t.substr(t.indexOf(\"\\n\"), t.length).replace(/\\s/g, \"\");\n\n        // the first line contains the name, though there's lots of variability around\n        // the information on this line...\n        // >MCHU - Calmodulin - Human, rabbit, bovine, rat, and chicken\n        const name = t.substring(0, t.search(/\\n|\\|/)).replace(/\\//g, \"\");\n\n        return {\n          annotations: [],\n          name,\n          seq,\n          type: guessType(seq),\n        };\n      })\n      .filter(p => p.name && p.seq);\n  }\n\n  if (text.trim().startsWith(\";\")) {\n    // it's an old-school style FASTA that's punctuated with semi-colons\n    // ;my|NAME\n    // ;my comment\n    // actGacgata\n    const name = text.substring(0, text.search(/\\n|\\|/)).replace(/\\//g, \"\");\n    const newlineBeforeSeq = text.indexOf(\"\\n\", text.lastIndexOf(\";\"));\n    const seq = text.substring(newlineBeforeSeq, text.length);\n    return [\n      {\n        annotations: [],\n        name,\n        seq,\n        type: guessType(seq),\n      },\n    ];\n  }\n\n  // assume that it's a no name FASTA. Ie it's just a file with dna and no header\n  // try and get the name from the fileName\n  const lastChar = fileName.lastIndexOf(\".\") || fileName.length;\n  const name = fileName.substring(0, lastChar) || \"Untitled\";\n  const seq = text;\n  return [\n    {\n      annotations: [],\n      name,\n      seq,\n      type: guessType(seq),\n    },\n  ];\n};\n","import { Annotation } from \"..\";\nimport { complement, guessType } from \"../utils\";\n\n// a list of recognized types that would constitute an annotation name\nconst tagNameSet = new Set([\"gene\", \"product\", \"note\", \"db_xref\", \"protein_id\", \"label\", \"lab_host\", \"locus_tag\"]);\n\n// a list of tags that could represent colors\nconst tagColorSet = new Set([\"ApEinfo_fwdcolor\", \"ApEinfo_revcolor\", \"loom_color\"]);\n\n/**\n * takes in a string representation of a GenBank file and outputs our\n * part representation of it. an example of a Genbank file can be found\n * at ./parsers/Gebank, though there is significant variability to the\n * format\n *\n * another official example can be found at:\n * https://www.ncbi.nlm.nih.gov/Sitemap/samplerecord.html\n */\nexport default (fileInput: string, fileName: string) =>\n  fileInput\n    .split(/\\/\\/\\s/g)\n    .filter(f => f.length > 5)\n    .map(file => {\n      // the first row contains the name of the part and its creation date\n      // LOCUS       SCU49845     5028 bp    DNA             PLN       21-JUN-1999\n      const HEADER_ROW = file.substring(file.indexOf(\"LOCUS\"), file.search(/\\\\n|\\n/));\n      const [, name] = HEADER_ROW.split(/\\s{2,}/g).filter(h => h);\n\n      // trying to avoid giving a stupid name like Exported which Snapgene has by default\n      // also, if there is not name in header, the seq length will be used as name, which should\n      // be corrected (Number.parseInt to check for this case) https://stackoverflow.com/a/175787/7541747\n      let parsedName = name;\n      if (\n        (parsedName === \"Exported\" && file.includes(\"SnapGene\")) || // stupid Snapgene name\n        Number.parseInt(parsedName, 10) // it thinks seq-length is the name\n      ) {\n        // first try and get the name from ACCESSION\n        let accessionName = false;\n        if (file.includes(\"ACCESSION\")) {\n          // this will be undefined is there is no\n          const accession = file\n            .substring(file.indexOf(\"ACCESSION\"), file.indexOf(\"\\n\", file.indexOf(\"ACCESSION\")))\n            .replace(\".\", \"\")\n            .split(/\\s{2,}/)\n            .filter(a => a !== \"ACCESSION\")\n            .pop();\n          if (accession) {\n            parsedName = accession;\n            accessionName = true;\n          }\n        }\n\n        // otherwise, revert to trying to get the part name from the file name\n        if (!accessionName && fileName) {\n          parsedName = fileName\n            .substring(0, Math.max(fileName.search(/\\n|\\||\\./), fileName.lastIndexOf(\".\")))\n            .replace(/\\/\\s/g, \"\");\n        } else if (!accessionName) {\n          parsedName = \"Unnamed\"; // give up\n        }\n      }\n\n      // the part sequence is contained in and after the line that begins with ORIGIN\n      // do this before annotations so we can calc seqlength\n      //\n      // ORIGIN\n      //    1 gatcctccat atacaacggt atctccacct caggtttaga tctcaacaac ggaaccattg\n      //    61 ccgacatgag acagttaggt atcgtcgaga gttacaagct aaaacgagca gtagtcagct\n      const SEQ_ROWS = file.substring(file.lastIndexOf(\"ORIGIN\") + \"ORIGIN\".length, file.length);\n      let seq = SEQ_ROWS.replace(/[^gatc]/gi, \"\");\n      ({ seq } = complement(seq)); // seq and compSeq\n\n      // the features are translated into annotations\n      // region is FEATURES thru ORIGIN\n      // FEATURES             Location/Qualifiers\n      //   source          1..5028\n      //                   /organism=\"Saccharomyces cerevisiae\"\n      //                   /db_xref=\"taxon:4932\"\n      //                   /chromosome=\"IX\"\n      //                   /map=\"9\"\n      //\n      // in the example above, source is the annotation \"type\" and name is \"taxon:4932\"\n      // because \"db_xref\" is a recognized name type\n      // the name depends on whether the tag type is in the reocgnized list of types\n      const annotations: Annotation[] = [];\n      const primers = [];\n      if (file.indexOf(\"FEATURES\")) {\n        const FEATURES_LINE = file.indexOf(\"FEATURES\");\n        const FEATURES_NEW_LINE = file.indexOf(\"\\n\", FEATURES_LINE);\n        let ORIGIN_LINE = file.lastIndexOf(\"ORIGIN\");\n\n        // some files have a contig file line that needs to parsed out/ shouldn't be included in\n        // the features parsing\n        if (file.includes(\"CONTIG\")) {\n          ORIGIN_LINE = Math.min(ORIGIN_LINE, file.indexOf(\"CONTIG\"));\n        }\n        const FEATURES_ROWS = file\n          .substring(FEATURES_NEW_LINE, ORIGIN_LINE)\n          .split(/\\n/)\n          .filter(r => r);\n\n        FEATURES_ROWS.forEach(r => {\n          // in the example above, the following converts it to ['source', '1..5028']\n          const currLine = r.split(/\\s{2,}/g).filter(l => l);\n          if (currLine.length > 1) {\n            // it's the beginning of a new feature/annotation\n            const [type, rangeString] = currLine;\n            const rangeRegex = /\\d+/g;\n            const direction = r.includes(\"complement\") ? -1 : 1;\n\n            // using the example above, this parses 1..5028 into 1 and 5028\n            let [start, end] = [0, 0];\n            const startSearch = rangeRegex.exec(rangeString);\n\n            if (startSearch) {\n              // the - 1 is because genbank is 1-based while we're 0\n              start = +startSearch[0] - (1 % seq.length);\n              // single bp annotations are a thing in Genbank:\n              // https://github.com/Lattice-Automation/seqviz/issues/117\n              end = (start + 1) % seq.length;\n              const endSearch = rangeRegex.exec(rangeString);\n              if (endSearch) {\n                end = +endSearch[0] % seq.length;\n              }\n            }\n\n            if (type !== \"source\") {\n              // create a new annotation around the properties in this line (type and range)\n              annotations.push({\n                direction,\n                // set in next block\n                end,\n                name: \"\",\n                start,\n                type,\n              });\n            }\n          } else if (currLine.length === 1) {\n            // it's a continuation of a prior feature/annotation\n            // any updates (to name or color) to the last annotation should affect\n            // the last annotation that's in the array\n            if (currLine[0].startsWith(\"/\")) {\n              let [tag] = currLine;\n              tag = tag.replace(/[/\"]/g, \"\"); // get rid of quotation marks and forward slaches\n              // should now look like ['organism', 'Saccharomyces cerevisiae']\n              const [tagName, tagValue] = tag.split(/=/);\n\n              // the two values that can be extracted are name or color\n              const lastAnn = annotations.length - 1;\n              if (tagNameSet.has(tagName.toLowerCase())) {\n                // the key is something we recognize as an annotation name\n                if (lastAnn >= 0 && !annotations[lastAnn].name) {\n                  annotations[lastAnn].name = tagValue.trim();\n                }\n              } else if (tagColorSet.has(tagName)) {\n                // the key is something we recognize as an annotation color\n                if (lastAnn > -1) {\n                  annotations[lastAnn].color = tagValue;\n                }\n              }\n            }\n          }\n        });\n      }\n\n      return {\n        annotations: annotations,\n        name: parsedName.trim() || fileName,\n        primers: primers,\n        seq: seq,\n        type: guessType(seq),\n      };\n    });\n","import { XMLParser } from \"fast-xml-parser\";\n\nimport { Annotation, Seq } from \"..\";\nimport { complement, guessType } from \"../utils\";\n\n/**\n * Converts a JBEI file to a Seq\n *\n * https://j5.jbei.org/j5manual/pages/94.html\n */\nexport default (JBEI: string): Seq[] => {\n  // weird edge case with directed quotation characters\n  const fileString = JBEI.replace(/“|”/g, '\"');\n\n  // parse\n  const parsedJbei = new XMLParser({\n    removeNSPrefix: true,\n  }).parse(fileString);\n\n  // destructure the parameters from JBEI\n  const { seq } = parsedJbei;\n  const { features, name, sequence } = seq;\n\n  // attempt to get the name out of the JBEI\n  let parsedName = \"Unnamed\";\n  if (name) {\n    parsedName = name;\n  }\n\n  // attempt to get the sequence. fail if it's not findable\n  const { seq: parsedSeq } = complement(sequence); // seq and compSeq\n  if (!parsedSeq) return [];\n\n  // attempt to parse the JBEI annotations into our version of annotations\n  const annotations: Annotation[] = [];\n  if (features && features.feature) {\n    features.feature.forEach(feature => {\n      if (!feature) return;\n\n      const { complement, label, location, type } = feature;\n      if (location && location.genbankStart && location.end) {\n        annotations.push({\n          direction: complement ? -1 : 1,\n          // JBEI is 1-based\n          end: +location.end || 0,\n          name: label || \"Untitled\",\n          start: +location.genbankStart - 1 || 0,\n          type: type || \"N/A\",\n        });\n      }\n    });\n  }\n\n  return [\n    {\n      annotations: annotations,\n      name: parsedName,\n      seq: parsedSeq,\n      type: guessType(parsedSeq),\n    },\n  ];\n};\n","import { Seq } from \"..\";\nimport sbolV1 from \"./sbol.v1\";\nimport sbolV2 from \"./sbol.v2\";\n\n/**\n * takes in an SBOL file in v1 or v2 format, and parses to an array of parts\n * that match the Loom data model\n */\nexport default (sbol: string, fileName: string): Seq[] =>\n  sbol.includes(\"sbols.org/v1#\") ? sbolV1(sbol) : sbolV2(sbol, fileName);\n","import { XMLParser } from \"fast-xml-parser\";\n\nimport { Annotation, Seq } from \"..\";\nimport { complement, guessType } from \"../utils\";\n\n/*\n  <sbol:Sequence rdf:about=\"https://synbiohub.cidarlab.org/public/Demo/A1_sequence/1\">\n    <sbol:persistentIdentity rdf:resource=\"https://synbiohub.cidarlab.org/public/Demo/A1_sequence\"/>\n    <sbol:displayId>A1_sequence</sbol:displayId>\n    <sbol:version>1</sbol:version>\n    <prov:wasDerivedFrom rdf:resource=\"https://github.com/CIDARLAB/cello/blob/master/resources/UCF/Eco1C1G1T0.UCF.json\"/>\n    <prov:wasGeneratedBy rdf:resource=\"https://synbiohub.cidarlab.org/public/Demo/cello2sbol/1\"/>\n    <dcterms:title>A1_sequence</dcterms:title>\n    <sbh:ownedBy rdf:resource=\"https://synbiohub.cidarlab.org/user/prash\"/>\n    <sbh:topLevel rdf:resource=\"https://synbiohub.cidarlab.org/public/Demo/A1_sequence/1\"/>\n    <sbol:elements>AATGTTCCCTAATAATCAGCAAAGAGGTTACTAG</sbol:elements>\n    <sbol:encoding rdf:resource=\"http://www.chem.qmul.ac.uk/iubmb/misc/naseq.html\"/>\n  </sbol:Sequence>\n*/\n\n/**\n * takes an SBOL file, as a string, and converts it into our DB\n * representation of a part(s). an example of this type of file can be\n * found in ../examples/j5.SBOL.xml\n */\nexport default (sbol: string): Seq[] => {\n  // weird edge case with directed quotation characters\n  const fileString = sbol.replace(/“|”/g, '\"');\n\n  // parse\n  const parsedSBOL = new XMLParser({\n    ignoreAttributes: false,\n    isArray: name =>\n      [\n        \"Sequence\",\n        \"Collection\",\n        \"DnaComponent\",\n        \"dnaSequence\",\n        \"ComponentDefinition\",\n        \"SequenceAnnotation\",\n        \"sequenceAnnotation\",\n        \"elements\",\n        \"component\",\n        \"annotation\",\n      ].includes(name),\n    removeNSPrefix: true,\n  }).parse(fileString);\n\n  let RDF = null;\n  if (parsedSBOL.RDF) ({ RDF } = parsedSBOL);\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'Collection' does not exist on type 'null... Remove this comment to see the full error message\n  const { Collection, DnaComponent } = RDF;\n  if (Collection && Collection.length) {\n    // it's a collection of DnaComponents, parse each to a part\n    const partList = [];\n    Collection.forEach(({ component }) => {\n      if (component && component.length) {\n        component.forEach(({ DnaComponent: nestedDnaComponent }) => {\n          partList.push(\n            // @ts-expect-error ts-migrate(2345) FIXME: Argument of type '{ seq: string; compSeq: string; ... Remove this comment to see the full error message\n            dnaComponentToPart(nestedDnaComponent[0], {\n              file: sbol,\n              strict: false,\n            })\n          );\n        });\n      }\n    });\n\n    // check whether any parts were created from the collection\n    if (partList.length) return partList;\n  } else if (DnaComponent && DnaComponent.length) {\n    // create a single part from the single one passed\n    const validPart = dnaComponentToPart(DnaComponent[0], {\n      file: sbol,\n      strict: false,\n    });\n    // it will be null if there isn't any sequence information beneath it\n    if (validPart) return [validPart];\n  }\n\n  // go on a fishing expedition for DnaComponents\n  // everything else has failed\n  // accumulate all that are \"valid\" (name + seq)\n  const dnaComponentAccumulator = [];\n  findDnaComponentNodes(dnaComponentAccumulator, RDF);\n\n  // @ts-ignore\n  const attemptedSeqs: Seq[] = dnaComponentAccumulator\n    .map(p =>\n      dnaComponentToPart(p, {\n        file: sbol,\n        strict: true,\n      })\n    )\n    .filter(p => !!p); // invalid parts will be null\n  if (attemptedSeqs.length) return attemptedSeqs;\n\n  // go on another fishing expedition, but for Sequence nodes\n  const dnaSequenceAccumulator = [];\n  findSequenceNodes(dnaSequenceAccumulator, RDF);\n  return dnaSequenceAccumulator.map(p => sequenceToPart(p, sbol)).filter(p => p); // invalid parts will be null\n};\n\n/**\n * find all the nodes within the JSON document that are keyed \"Sequence\"\n *\n * this is another last-resort scrapper for trying to find valid parts\n */\nconst findSequenceNodes = (acc, doc) => {\n  Object.keys(doc).forEach(k => {\n    if (k === \"Sequence\" && doc[k].length) acc.push(...doc[k]);\n    if (Array.isArray(doc[k])) {\n      doc[k].forEach(nestedNode => {\n        findSequenceNodes(acc, nestedNode);\n      });\n    }\n  });\n};\n\n/**\n * after getting a DnaComponent out of the SBOL document,\n * at either the root RDF level or from within a Collection/Annotation\n * hierarchy, convert that DnaComponent to a Seq\n */\nconst dnaComponentToPart = (DnaComponent, options) => {\n  const { strict = false } = options;\n  // destructure the params from DnaComponent\n  const { annotation, displayId, dnaSequence, name } = DnaComponent;\n\n  // attempt to get the name out of the SBOL\n  let parsedName = \"Unnamed\";\n  if (name) {\n    parsedName = name;\n  } else if (displayId) {\n    parsedName = displayId;\n  } else if (strict) {\n    // in this scenario, we're really scrapping to find parts, but shouldn't\n    // accept any that don't at least have some name and sequence information\n    return null;\n  }\n\n  // attempt to get the sequence. fail if it's not findable\n  let seq = \"\";\n  if (dnaSequence && dnaSequence[0].DnaSequence) {\n    seq = dnaSequence[0].DnaSequence.nucleotides;\n  }\n\n  const { seq: parsedSeq } = complement(seq); // seq and compSeq\n  if (!parsedSeq) return null;\n\n  // attempt to parse the SBOL annotations into our version of annotations\n  const annotations: Annotation[] = [];\n  if (annotation) {\n    annotation.forEach(({ SequenceAnnotation }) => {\n      if (!SequenceAnnotation || !SequenceAnnotation[0]) return;\n\n      const { bioEnd, bioStart, strand, subComponent } = SequenceAnnotation[0];\n      if (subComponent && subComponent.DnaComponent && subComponent.DnaComponent[0]) {\n        const { displayId: annId, name: annName, type: annType } = subComponent.DnaComponent[0];\n\n        annotations.push({\n          direction: strand === \"+\" ? 1 : -1,\n          end: bioEnd - 1 || 0,\n          name: annName || annId || \"Untitled\",\n          start: bioStart - 1 || 0,\n          type: annType[\"@_resource\"] || \"N/A\",\n        });\n      }\n    });\n  }\n\n  return {\n    annotations: annotations,\n    name: parsedName,\n    seq: parsedSeq,\n    type: guessType(seq),\n  };\n};\n\n/**\n * find all nodes that of the type Sequence, and convert those to parts \"Sequence\" -> Part\n *\n * this is not the standard format. see A1.xml\n */\nconst sequenceToPart = (Seq, file) => {\n  // get the name\n  const name = Seq.displayId || Seq.title || \"Unnamed\";\n\n  // get the sequence\n  const seqOrig = Seq.elements[0] || \"\";\n\n  const { compSeq, seq } = complement(seqOrig);\n\n  // guess whether it's circular or not based on the presence of a word like vector.\n  // very ad hoc\n  const circular = file.search(/plasmid/i) > 0;\n\n  return { annotations: [], circular, compSeq, name, seq, type: guessType(seq) };\n};\n\n/**\n * find all the nodes within the SBOL JSON document that are keyed \"DnaComponent\"\n *\n * this is a last-resort scrapper that tries to find valid parts that aren't within a root\n * DnaComponent document or within a root Collection array\n */\nconst findDnaComponentNodes = (acc: Seq[], doc: any) => {\n  Object.keys(doc).forEach(k => {\n    if (k === \"DnaComponent\" && doc[k].length) acc.push(...doc[k]);\n    if (Array.isArray(doc[k])) {\n      doc[k].forEach(nestedNode => {\n        findDnaComponentNodes(acc, nestedNode);\n      });\n    }\n  });\n};\n","import { XMLParser } from \"fast-xml-parser\";\n\nimport { Annotation, Seq } from \"..\";\nimport { complement, guessType } from \"../utils\";\n\n/**\n * Converts an SBOL file to our Seq format.\n *\n * SBOL v2.0 schema definition can be found at: http://sbolstandard.org/wp-content/uploads/2016/06/SBOL-data-model-2.2.1.pdf\n * differs from SBOL v1.0 in that the ComponentDefinitions are like the root parts,\n * and the sequence and annotations are separated (they're no longer defined relationally\n * by nesting but, instead, by id) we only care about components that have sequence information\n */\nexport default (sbol: string, fileName: string): Seq[] => {\n  // weird edge case with directed quotation characters\n  const fileString = sbol.replace(/“|”/g, '\"');\n\n  // parse\n  const parsedSBOL = new XMLParser({\n    ignoreAttributes: false,\n    isArray: name =>\n      [\"Sequence\", \"ComponentDefinition\", \"SequenceAnnotation\", \"sequenceAnnotation\", \"elements\"].includes(name),\n    removeNSPrefix: true,\n  }).parse(fileString);\n\n  try {\n    const seqList = parseSBOL2(parsedSBOL, fileName);\n\n    if (seqList.length) {\n      return seqList;\n    } else {\n      throw new Error(\"No Sequence info found\");\n    }\n  } catch (err) {\n    throw new Error(`Failed to parse SBOL v2 file: ${err}`);\n  }\n};\n\nconst parseSBOL2 = (parsedSBOL, fileName: string): Seq[] => {\n  let RDF = null;\n  if (parsedSBOL.RDF) {\n    ({ RDF } = parsedSBOL);\n  }\n\n  if (!RDF) {\n    throw new Error(\"No root RDF document\");\n  }\n\n  // check if anything is defined, return if not\n  const { ComponentDefinition, Sequence } = RDF;\n  if (!ComponentDefinition && !Sequence) {\n    throw new Error(\"Failed to parse SBOL v2: No ComponentDefinition or Sequence\");\n  }\n\n  // read thru the Sequence elements\n  const getSeq = (seqID?: string) => {\n    const seqElement = seqID\n      ? // @ts-ignore\n        Sequence.find(\n          s =>\n            (s.persistentIdentity && s.persistentIdentity.length && s.persistentIdentity[\"@_resource\"] === seqID) ||\n            s[\"@_about\"] === seqID\n        )\n      : Sequence[0];\n\n    if (seqElement && seqElement.elements) {\n      const { seq } = complement(seqElement.elements[0] || \"\");\n      return {\n        annotations: [],\n        name: seqElement.displayId,\n        seq,\n        type: guessType(seq),\n      };\n    }\n    return null;\n  };\n\n  // if it's a collection of DnaComponents, parse each to a part\n  const seqList: Seq[] = [];\n  // @ts-ignore\n  ComponentDefinition?.forEach((c, i) => {\n    // we're only making parts out of those with seq info\n    if (!c.sequence) {\n      return;\n    }\n\n    const { displayId, sequence, sequenceAnnotation } = c;\n    const name = displayId || `${fileName}_${i + 1}`;\n\n    const annotations: Annotation[] = [];\n    (sequenceAnnotation || []).forEach(({ SequenceAnnotation }) => {\n      const ann = SequenceAnnotation[0];\n      const annId = ann.displayId;\n      const { Range } = ann.location;\n\n      const range = Range;\n      if (range) {\n        annotations.push({\n          end: range.end - 1,\n          name: annId,\n          start: range.start - 1,\n        });\n      }\n    });\n\n    const seq = getSeq(sequence[\"@_resource\"]);\n\n    if (seq) {\n      seqList.push({\n        annotations,\n        name,\n        seq: seq.seq,\n        type: seq.type,\n      });\n    }\n  });\n\n  // if it's a single sequence, just try and get the sequence from that alone\n  const seq = getSeq();\n  if (!seqList.length && seq) {\n    seqList.push(seq);\n  }\n  return seqList;\n};\n","import { Annotation } from \"..\";\nimport { complement, guessType } from \"../utils\";\n\n// a list of recognized types that would constitute an annotation name\nconst tagNameList = [\"gene\", \"product\", \"note\", \"db_xref\", \"protein_id\", \"label\", \"lab_host\"];\n\n// a list of tags that could represent colors\nconst tagColorList = [\"ApEinfo_fwdcolor\", \"ApEinfo_revcolor\", \"loom_color\"];\n\n/**\n * takes in a string representation of a SeqBuilder file and outputs our\n * part representation of it. an example of a SeqBuilder file can be found\n * at imports/io/examples/seqbuilder, though there may be variations to the\n * format\n */\nexport default (fileInput: string, fileName: string) =>\n  fileInput.split(/\\/\\/\\s/g).map(file => {\n    // +++++SEQUENCE+++++//\n    // the part sequence comes after the line that specifies the seqbuilder version number\n    // @ts-ignore\n    const SEQ_ROWS = file\n      .substring(\n        file.search(/.*?written by seqbuilder .*?[0-9.]+[^actg]+/i) +\n          // @ts-ignore\n          file.match(/.*?written by seqbuilder .*?[0-9.]+[^actg]+/i)[0].length,\n        file.length\n      )\n      .match(/[actgyrwskmdvhbxn]+/gim)[0];\n\n    let seq = SEQ_ROWS;\n    ({ seq } = complement(seq)); // seq and compSeq\n    // there may be a genbank-like header row after the sequence\n    // LOCUS       SCU49845     5028 bp    DNA             PLN       21-JUN-1999\n    let parsedName = fileName.length > 0 ? fileName : \"Unnamed\";\n\n    if (~file.indexOf(\"LOCUS\")) {\n      const HEADER_ROW = file.substring(file.indexOf(\"LOCUS\"), file.search(/\\\\n|\\n/));\n      if (HEADER_ROW && HEADER_ROW.split(/\\s{2,}/g)) {\n        const [, name] = HEADER_ROW.split(/\\s{2,}/g).filter(h => h);\n        parsedName = name;\n      }\n    }\n    // Name setting logic ported from GenBank parser\n    if (\n      (parsedName === \"Exported\" && file.includes(\"SnapGene\")) || // stupid Snapgene name\n      Number.parseInt(parsedName, 10) // it thinks seq-length is the name\n    ) {\n      // first try and get the name from ACCESSION\n      let accessionName = false;\n      if (file.includes(\"ACCESSION\")) {\n        // this will be undefined is there is no\n        const accession = file\n          .substring(file.indexOf(\"ACCESSION\"), file.indexOf(\"\\n\", file.indexOf(\"ACCESSION\")))\n          .replace(\".\", \"\")\n          .split(/\\s{2,}/)\n          .filter(a => a !== \"ACCESSION\")\n          .pop();\n        if (accession) {\n          parsedName = accession;\n          accessionName = true;\n        }\n      }\n\n      // otherwise, revert to trying to get the part name from the file name\n      if (!accessionName && fileName) {\n        parsedName = fileName\n          .substring(0, Math.max(fileName.search(/\\n|\\||\\./), fileName.lastIndexOf(\".\")))\n          .replace(/\\/\\s/g, \"\");\n      } else if (!accessionName) {\n        parsedName = \"Unnamed\"; // give up\n      }\n    }\n\n    // +++++ANNOTATIONS+++++//\n    // the features are translated into annotations\n    // region is FEATURES thru ORIGIN\n    // FEATURES             Location/Qualifiers\n    //   source          1..5028\n    //                   /organism=\"Saccharomyces cerevisiae\"\n    //                   /db_xref=\"taxon:4932\"\n    //                   /chromosome=\"IX\"\n    //                   /map=\"9\"\n    //\n    // in the example above, source is the annotation \"type\" and name is \"taxon:4932\"\n    // because \"db_xref\" is a recognized name type\n    // the name depends on whether the tag type is in the reocgnized list of types\n    const annotations: Annotation[] = [];\n    if (file.indexOf(\"FEATURES\")) {\n      const FEATURES_LINE = file.indexOf(\"FEATURES\");\n      const FEATURES_NEW_LINE = file.indexOf(\"\\n\", FEATURES_LINE);\n      let ORIGIN_LINE = file.lastIndexOf(\"ORIGIN\");\n\n      // some files have a contig file line that needs to parsed out/ shouldn't be included in\n      // the features parsing\n      if (file.includes(\"CONTIG\")) {\n        ORIGIN_LINE = Math.min(ORIGIN_LINE, file.indexOf(\"CONTIG\"));\n      }\n      const FEATURES_ROWS = file\n        .substring(FEATURES_NEW_LINE, ORIGIN_LINE)\n        .split(/\\n/)\n        .filter(r => r);\n\n      FEATURES_ROWS.forEach(r => {\n        // in the example above, the following converts it to ['source', '1..5028']\n        const currLine = r.split(/\\s{2,}/g).filter(l => l);\n        if (currLine.length > 1) {\n          // it's the beginning of a new feature/annotation\n          const [type, rangeString] = currLine;\n          const rangeRegex = /\\d+/g;\n          const direction = r.includes(\"complement\") ? -1 : 1;\n\n          // using the example above, this parses 1..5028 into 1 and 5028\n          let [start, end] = [0, 0];\n          const startSearch = rangeRegex.exec(rangeString);\n\n          if (startSearch) {\n            // the - 1 is because genbank is 1-based while we're 0\n            start = +startSearch[0] - (1 % seq.length);\n            const endSearch = rangeRegex.exec(rangeString);\n            if (endSearch) {\n              end = +endSearch[0] % seq.length;\n            }\n          }\n\n          if (type !== \"source\") {\n            // source would just be an annotation for the entire sequence so remove\n            // create a new annotation around the properties in this line (type and range)\n            annotations.push({\n              direction,\n              end,\n              name: \"\",\n              start,\n              type,\n            });\n          }\n        } else if (currLine.length === 1) {\n          // it's a continuation of a prior feature/annotation\n          // any updates (to name or color) to the last annotation should affect\n          // the last annotation that's in the array\n          let [tag] = currLine;\n          tag = tag.replace(/[/\"]/g, \"\"); // get rid of quotation marks and forward slaches\n          // should now look like ['organism', 'Saccharomyces cerevisiae']\n          const [tagName, tagValue] = tag.split(/=/);\n\n          // the two values that can be extracted are name or color\n          const lastAnnIndex = annotations.length - 1;\n          if (tagNameList.includes(tagName)) {\n            // it's key value pair where the key is something we recognize as an annotation name\n            if (lastAnnIndex > -1 && !annotations[annotations.length - 1].name) {\n              // defensively check that there isn't already a defined annotation w/o a name\n              annotations[annotations.length - 1].name = tagValue.trim();\n            }\n          } else if (tagColorList.includes(tagName)) {\n            // it's key value pair where the key is something we recognize as an annotation color\n            if (lastAnnIndex > -1) {\n              // defensively check that there's already been a defined annotation\n              annotations[annotations.length - 1].color = tagValue;\n            }\n          }\n        }\n      });\n    }\n\n    return {\n      annotations: annotations,\n      name: parsedName.trim() || fileName,\n      seq: seq,\n      type: guessType(seq),\n    };\n  });\n","import { XMLParser } from \"fast-xml-parser\";\nimport { sep } from \"path\";\n\nimport { Annotation, ParseOptions, Seq } from \"..\";\nimport { guessType, parseDirection } from \"../utils\";\n\n/**\n * Parse a SnapGene file to Seq[]\n *\n * this is adapted from https://github.com/TeselaGen/ve-sequence-parsers/blob/master/src/parsers/snapgeneToJson.js\n * which was adapted from https://github.com/IsaacLuo/SnapGeneFileReader/blob/master/snapgene_reader/snapgene_reader.py\n */\nexport default (options?: ParseOptions): Seq[] => {\n  if (!options || !options.source) {\n    throw new Error(\"Failed to parse SnapGene file. No valid file input\");\n  }\n\n  const fileName = options?.fileName || \"\";\n  const seq = {\n    annotations: [] as Annotation[],\n    circular: false,\n    name: \"\",\n    seq: \"\",\n    type: \"unknown\",\n  };\n\n  const buffer = Buffer.from(options.source);\n\n  // Accumulate an offset from the start as we read through the file\n  let offset = 0;\n\n  // Read a buffer from the buffer\n  const read = (size: number) => {\n    const start = offset;\n    offset += size;\n    return buffer.subarray(start, offset);\n  };\n\n  // Read from buffer and decode as string\n  const readEnc = (size: number, fmt: BufferEncoding) => read(size).toString(fmt);\n\n  // Read the first byte\n  read(1);\n\n  // Read document properties\n  const length = read(4).readUInt32BE();\n  const title = readEnc(8, \"ascii\");\n  if (length !== 14 || title !== \"SnapGene\") {\n    throw new Error(`Wrong format for a SnapGene file: length=${length} title=${title}`);\n  }\n\n  read(2); // isDNA\n  read(2); // exportVersion\n  read(2); // importVersion\n\n  /* eslint-disable no-await-in-loop */\n  // READ THE WHOLE FILE, BLOCK BY BLOCK, UNTIL THE END\n  while (offset < buffer.length) {\n    // next_byte table\n    // 0: dna sequence\n    // 1: compressed DNA\n    // 2: unknown\n    // 3: unknown\n    // 5: primers\n    // 6: notes\n    // 7: history tree\n    // 8: additional sequence properties segment\n    // 9: file Description\n    // 10: features\n    // 11: history node\n    // 13: unknown\n    // 16: alignable sequence\n    // 17: alignable sequence\n    // 18: sequence trace\n    // 19: Uracil Positions\n    // 20: custom DNA colors\n\n    const nextByte = read(1);\n    const blockSize = read(4).readUInt32BE();\n    const ord = nextByte.toString().charCodeAt(0);\n    if (ord === 0) {\n      // Read the sequence and its properties\n      read(1); // isCircular\n\n      const size = blockSize - 1;\n      if (size < 0) throw new Error(\"Failed parsing SnapGene: < 0 length sequence\");\n      seq.seq = readEnc(size, \"ascii\");\n    } else if (ord === 10) {\n      // Read all the features\n      const xml = readEnc(blockSize, \"utf8\") as string;\n      const b = new XMLParser({\n        attributeNamePrefix: \"\",\n        ignoreAttributes: false,\n        isArray: name => name === \"Q\" || name === \"Segment\",\n        removeNSPrefix: true,\n      }).parse(xml);\n\n      b.Features.Feature.forEach(feature => {\n        let minStart = 0;\n        let maxEnd = 0;\n        const { range } = feature.Segment[0];\n        const [start, end] = range.split(\"-\");\n        minStart = minStart === 0 ? +start : Math.min(minStart, +start);\n        maxEnd = Math.max(maxEnd, +end);\n\n        // create an Annotation\n        seq.annotations.push({\n          direction: parseDirection(\n            {\n              \"0\": \"NONE\",\n              \"1\": 1,\n              \"2\": -1,\n              \"3\": \"BIDIRECTIONAL\",\n              undefined: \"NONE\",\n            }[feature.directionality]\n          ),\n          end: maxEnd - 1,\n          name: feature.name,\n          start: minStart - 1,\n          type: feature.type,\n        });\n      });\n    } else {\n      // UNKNOWN: WE IGNORE THE WHOLE BLOCK\n      read(blockSize);\n    }\n  }\n\n  return [\n    {\n      ...seq,\n      // SnapGene uses the filename as the sequence name\n      name: fileName.split(sep).pop()?.replace(\".dna\", \"\") || fileName,\n      type: guessType(seq.seq),\n    },\n  ];\n};\n","// from http://arep.med.harvard.edu/labgc/adnan/projects/Utilities/revcomp.html\nconst comp = {\n  A: \"T\",\n  B: \"V\",\n  C: \"G\",\n  D: \"H\",\n  G: \"C\",\n  H: \"D\",\n  K: \"M\",\n  M: \"K\",\n  N: \"N\",\n  R: \"Y\",\n  S: \"S\",\n  T: \"A\",\n  U: \"A\",\n  V: \"B\",\n  W: \"W\",\n  X: \"X\",\n  Y: \"R\",\n  a: \"t\",\n  b: \"v\",\n  c: \"g\",\n  d: \"h\",\n  g: \"c\",\n  h: \"d\",\n  k: \"m\",\n  m: \"k\",\n  n: \"n\",\n  r: \"y\",\n  s: \"s\",\n  t: \"a\",\n  u: \"a\",\n  v: \"b\",\n  w: \"w\",\n  x: \"x\",\n  y: \"r\",\n};\n\n/**\n * Return the filtered sequence and its complement if its an empty string, return the same for both.\n */\nexport const complement = (origSeq: string): { compSeq: string; seq: string } => {\n  if (!origSeq) {\n    return { compSeq: \"\", seq: \"\" };\n  }\n\n  // filter out unrecognized basepairs and build up the complement\n  let seq = \"\";\n  let compSeq = \"\";\n  for (let i = 0, origLength = origSeq.length; i < origLength; i += 1) {\n    if (comp[origSeq[i]]) {\n      seq += origSeq[i];\n      compSeq += comp[origSeq[i]];\n    }\n  }\n  return { compSeq, seq };\n};\n\n/**\n * Return the reverse complement of a DNA sequence\n */\nexport const reverseComplement = (inputSeq: string): string => {\n  const { compSeq } = complement(inputSeq);\n  return compSeq.split(\"\").reverse().join(\"\");\n};\n\nexport const firstElement = (arr: any) => {\n  if (!Array.isArray(arr)) return undefined;\n  return arr[0];\n};\n\nconst fwd = new Set([\"FWD\", \"fwd\", \"FORWARD\", \"forward\", \"FOR\", \"for\", \"TOP\", \"top\", \"1\", 1]);\nconst rev = new Set([\"REV\", \"rev\", \"REVERSE\", \"reverse\", \"BOTTOM\", \"bottom\", \"-1\", -1]);\n\n/**\n * Parse the user defined direction, estimate the direction of the element\n *\n * ```js\n * parseDirection(\"FWD\") => 1\n * parseDirection(\"FORWARD\") => 1\n * ```\n */\nexport const parseDirection = (direction: number | string | undefined): -1 | 0 | 1 => {\n  if (!direction) {\n    return 0;\n  }\n  if (fwd.has(direction)) {\n    return 1;\n  }\n  if (rev.has(direction)) {\n    return -1;\n  }\n  return 0;\n};\n\n/**\n * mapping the 64 standard codons to amino acids\n * no synth AA's\n *\n * adapted from: \"https://github.com/keithwhor/NtSeq/blob/master/lib/nt.js\n */\nconst codon2AA = {\n  AAA: \"K\",\n  AAC: \"N\",\n  AAG: \"K\",\n  AAT: \"N\",\n  ACA: \"T\",\n  ACC: \"T\",\n  ACG: \"T\",\n  ACT: \"T\",\n  AGA: \"R\",\n  AGC: \"S\",\n  AGG: \"R\",\n  AGT: \"S\",\n  ATA: \"I\",\n  ATC: \"I\",\n  ATG: \"M\",\n  ATT: \"I\",\n  CAA: \"Q\",\n  CAC: \"H\",\n  CAG: \"Q\",\n  CAT: \"H\",\n  CCA: \"P\",\n  CCC: \"P\",\n  CCG: \"P\",\n  CCT: \"P\",\n  CGA: \"R\",\n  CGC: \"R\",\n  CGG: \"R\",\n  CGT: \"R\",\n  CTA: \"L\",\n  CTC: \"L\",\n  CTG: \"L\",\n  CTT: \"L\",\n  GAA: \"E\",\n  GAC: \"D\",\n  GAG: \"E\",\n  GAT: \"D\",\n  GCA: \"A\",\n  GCC: \"A\",\n  GCG: \"A\",\n  GCT: \"A\",\n  GGA: \"G\",\n  GGC: \"G\",\n  GGG: \"G\",\n  GGT: \"G\",\n  GTA: \"V\",\n  GTC: \"V\",\n  GTG: \"V\",\n  GTT: \"V\",\n  TAA: \"*\",\n  TAC: \"Y\",\n  TAG: \"*\",\n  TAT: \"Y\",\n  TCA: \"S\",\n  TCC: \"S\",\n  TCG: \"S\",\n  TCT: \"S\",\n  TGA: \"*\",\n  TGC: \"C\",\n  TGG: \"W\",\n  TGT: \"C\",\n  TTA: \"L\",\n  TTC: \"F\",\n  TTG: \"L\",\n  TTT: \"F\",\n};\n\nconst aminoAcids = Array.from(new Set(Object.values(codon2AA)).values()).join(\"\");\nconst aminoAcidRegex = new RegExp(`^[${aminoAcids}]+$`, \"i\");\n\n/** Infer the type of a sequence. This only allows a couple wildcard characters so may be overly strict. */\nexport const guessType = (seq: string): \"dna\" | \"rna\" | \"aa\" | \"unknown\" => {\n  if (/^[atgcn.]+$/i.test(seq)) {\n    return \"dna\";\n  } else if (/^[augcn.]+$/i.test(seq)) {\n    return \"rna\";\n  } else if (aminoAcidRegex.test(seq)) {\n    return \"aa\";\n  }\n  return \"unknown\";\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","module.exports = __WEBPACK_EXTERNAL_MODULE__911__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(156);\n"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__18__","__WEBPACK_EXTERNAL_MODULE__911__","validator","XMLParser","XMLBuilder","XMLValidator","nameStartChar","nameRegexp","regexName","RegExp","isExist","v","isEmptyObject","obj","Object","keys","length","merge","target","a","arrayMode","len","i","getValue","isName","string","exec","getAllMatches","regex","matches","match","allmatches","startIndex","lastIndex","index","push","util","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","substr","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validate","options","assign","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","trim","substring","msg","result","readAttributeStr","attrStr","value","attrStrStart","isValid","validateAttributeString","code","line","tagClosed","otg","pop","openPos","col","indexOf","afterAmp","validateAmpersand","JSON","stringify","map","t","replace","doubleQuote","singleQuote","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","undefined","attrName","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","split","buildFromOrderedJs","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","cdataPropName","format","indentBy","suppressEmptyNode","suppressUnpairedNode","suppressBooleanAttributes","tagValueProcessor","key","attributeValueProcessor","preserveOrder","commentPropName","entities","val","processEntities","stopNodes","Builder","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","buildTextNode","buildEmptyTextNode","buildObjNode","buildEmptyObjNode","buildTextValNode","buildObjectNode","replaceEntitiesValue","buildAttrPairStr","object","level","j2x","tagEndExp","piClosingChar","textValue","entity","repeat","name","startsWith","prototype","build","jObj","Array","isArray","arrayNodeName","Date","attr","newval","arrLen","j","item","Ks","L","arrToStr","arr","jPath","indentation","xmlStr","isPreviousElementTag","tagObj","propName","newJPath","tagText","isStopNode","attStr","attr_to_str","tempInd","piTextNodeName","newIdentation","tagStart","tagValue","endsWith","includes","attrMap","attrVal","lastIndexOf","jArray","entityRegex","parseEntityExp","exp","regx","Error","hasBody","comment","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","numberParseOptions","hex","leadingZeros","alwaysCreateTextNode","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","buildOptions","xmlNode","readDocType","toNumber","addExternalEntities","externalEntities","entKeys","ent","lastEntities","parseTextData","dontTrim","hasAttributes","isLeafNode","escapeEntities","parseValue","resolveNameSpace","prefix","charAt","attrsRegx","buildAttributesMap","attrs","oldVal","aName","newVal","attrCollection","parseXml","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","saveTextToParentTag","tagsNodeStack","tagData","readTagExp","childNode","add","tagExp","attrExpPresent","addChild","endIndex","docTypeEntities","lastTag","isItStopNode","tagContent","readStopNodeData","child","entityName","ampEntity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","str","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","search","openTagCount","shouldParse","constructor","OrderedObjParser","prettify","parse","validationOption","toString","orderedObjParser","orderedResult","addEntity","compress","text","compressedObj","property","newJpath","isLeaf","isLeafTag","assignAttributes","jpath","atrrName","propCount","node","global","self","window","getGlobal","fetch","bind","Headers","Request","Response","hexRegex","numRegex","Number","parseInt","parseFloat","consider","decimalPoint","eNotation","trimmedStr","skipLike","test","sign","numTrimmedByZeros","numStr","num","accession","url","process","cors","body","response","ok","isAccession","parseFile","input","fileName","file","opts","sourceName","sep","firstLine","dnaOnlyFile","isBenchling","every","k","ex","seqs","seq","complement","annotations","type","guessType","p","sort","b","end","color","direction","partJSON","bases","parseDirection","strand","_id","parsedBiobrick","part","rsbpml","part_list","bail","features","part_name","sequences","firstElement","feature","endpos","startpos","filter","seq_data","newlineBeforeSeq","lastChar","tagNameSet","Set","tagColorSet","fileInput","f","parsedName","h","accessionName","Math","max","FEATURES_LINE","FEATURES_NEW_LINE","ORIGIN_LINE","min","r","forEach","currLine","l","rangeString","rangeRegex","startSearch","endSearch","tag","lastAnn","has","toLowerCase","primers","JBEI","fileString","sequence","parsedSeq","label","location","genbankStart","sbol","parsedSBOL","RDF","Collection","DnaComponent","component","nestedDnaComponent","dnaComponentToPart","strict","validPart","dnaComponentAccumulator","findDnaComponentNodes","attemptedSeqs","dnaSequenceAccumulator","findSequenceNodes","sequenceToPart","acc","doc","nestedNode","annotation","displayId","dnaSequence","DnaSequence","nucleotides","SequenceAnnotation","bioEnd","bioStart","subComponent","annId","annName","annType","Seq","title","seqOrig","elements","compSeq","circular","seqList","parseSBOL2","ComponentDefinition","Sequence","getSeq","seqID","seqElement","find","s","persistentIdentity","c","sequenceAnnotation","ann","range","tagNameList","tagColorList","HEADER_ROW","lastAnnIndex","source","buffer","Buffer","from","offset","read","size","subarray","readEnc","fmt","readUInt32BE","nextByte","blockSize","ord","charCodeAt","xml","Features","Feature","minStart","maxEnd","Segment","directionality","comp","A","B","C","D","G","H","K","M","N","R","S","T","U","V","W","X","Y","d","g","m","n","u","w","x","y","origSeq","origLength","reverseComplement","inputSeq","reverse","join","fwd","rev","aminoAcids","values","AAA","AAC","AAG","AAT","ACA","ACC","ACG","ACT","AGA","AGC","AGG","AGT","ATA","ATC","ATG","ATT","CAA","CAC","CAG","CAT","CCA","CCC","CCG","CCT","CGA","CGC","CGG","CGT","CTA","CTC","CTG","CTT","GAA","GAC","GAG","GAT","GCA","GCC","GCG","GCT","GGA","GGC","GGG","GGT","GTA","GTC","GTG","GTT","TAA","TAC","TAG","TAT","TCA","TCC","TCG","TCT","TGA","TGC","TGG","TGT","TTA","TTC","TTG","TTT","aminoAcidRegex","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}